

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User{
  id String @id @default(uuid())
  clerkUserId String @unique
  email String @unique
  name String
  imageUrl String?
  phoneNumber String?
  address String?
  city String?
  state String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role UserRole @default(USER)
  bookmarkedCars UserBookmarkedCar[]
  rentedCars UserRentedCar[]
  carReservationApprovals CarReservationApproval[]
 
}

enum UserRole {
  USER
  ADMIN
}

enum CarStatus {
  AVAILABLE
  RENTED
  RESERVED
}

enum CarDeleteStatus {
  NOT_DELETED @map("0")
  DELETED @map("1")
}

model Car {
  id String @id @default(uuid())
  brand String
  model String 
  year Int
  price Decimal @db.Decimal(10, 2)
  mileage Int
  fuelType String
  transmission String
  color String
  seats Int?
  bodyType String
  description String?
  featured Boolean @default(false)
  images String[]
  rentalCount Int @default(0)
  status CarStatus @default(AVAILABLE)
  bookMarkedBy UserBookmarkedCar[]
  rentedBy UserRentedCar[]
  isDeleted CarDeleteStatus @default(NOT_DELETED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carReservationApprovals CarReservationApproval[]

  @@index([brand,model])
  @@index([bodyType])
  @@index([price])
  @@index([year])
  @@index([status])
  @@index([fuelType])
  @@index([featured])
 
}
model CarReservationApproval {
  id          String   @id @default(uuid())
  userId      String
  carId       String
  startDate   DateTime
  endDate     DateTime
  totalPrice  Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  car         Car      @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([carId])
}



model UserBookmarkedCar{
  id String @id @default(uuid())
  userId String
  carId String
  createdAt DateTime @default(now())
  savedAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  car Car @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([userId, carId])
  @@index([userId])
  @@index([carId])
}



model UserRentedCar {
  id        String   @id @default(uuid())
  userId    String
  carId     String
  rentedAt  DateTime @default(now())
  returnDate DateTime?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([userId, carId])
  @@index([userId])
  @@index([carId])
}



